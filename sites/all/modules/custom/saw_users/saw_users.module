<?php 

/**
 * Provides general Users functionality for Student Art World site
 * Package: Student Art World (SAW) module
 *
 * Developers:
 *  Rafal Wieczorek <rafal.wieczorek@itv.com>
 *
 */

function saw_users_init ()
{
	drupal_add_js (drupal_get_path ('module', 'saw_users') . "/searchbox.js", "saw_users");
	drupal_add_js (drupal_get_path ('module', 'saw_users') . "/profilemenu.js", "saw_users");
	drupal_add_js (drupal_get_path ('module', 'saw_users') . "/toolbar.js", "saw_users");
	drupal_add_js (drupal_get_path ('module', 'saw_users') . "/hacks.js", "saw_users");
	
	
	global $user;
	
	if (arg (0) == 'ideas' && arg (1) == 'list' && !$user -> uid)
		drupal_set_message (t('To vote, please !1 login !2 or !3 register!4', array ('!1' => '<a href="/user">', '!2' => '</a>', '!3' => '<a href="/user/register">', '!4' => '</a>.')), 'warning');
}

/**
 * Views SQL Query modifier
 * Provides:
 *  - Adding more informations to the location.name such as country and city
 * @param view $view
 */
function saw_users_views_query_alter (view &$view)
{
	foreach ($view -> query -> where as &$where)
		if (array_key_exists ('clauses', $where))
			foreach ($where ['clauses'] as $name => &$clause)
			{
				if (($position = strpos ($clause, 'UPPER(location.name)')) !== false)
				// If view is using location.name field then replace the occurences with more descriptional data such as country and city
					$clause = str_replace ('UPPER(location.name)', "COALESCE(UPPER(CONCAT(CONCAT(CONCAT(CONCAT(location.name, ' '), location.country), ' '), location.city)),'')", $clause);
				
				if (($position = strpos ($clause, 'field_image_list <> 0')) !== false)
					$clause = str_replace ('field_image_list <> 0', 'field_image_list IS NOT NULL', $clause);
			}
}

function saw_render_block ($name)
{
  $block = db_fetch_object (db_query (
		"
			SELECT DISTINCT(b.bid), title, body, format
			FROM boxes
			LEFT JOIN blocks b ON boxes.bid = b.delta
			LEFT JOIN fe_block_boxes febb ON febb.bid = b.delta
			WHERE module = 'block' AND febb.machine_name = '" . addslashes ($name) . "' AND b.theme = 'saw'
		"));
  db_query ();
  $block -> content	= check_markup ($block -> body, $block -> format, FALSE);
  $block -> module	= 'block';
  $block -> subject	= $block -> title;
  $block -> delta		= $block -> bid;
  
  return theme ('block', $block);
}

function saw_users_get_user_stats ($userId = null)
{

	// #463: When we are in /user/me, a PHP warning occurs
	if ($userId === 'me')
	{
		global $user;
		
		$userId = $user -> uid;
	}

	$block = db_fetch_object (db_query (
	"
			SELECT
			(SELECT COUNT(*) FROM node N WHERE N.uid = $userId AND N.type = 'art') AS num_arts,
			(SELECT SUM(comment_count) FROM node_comment_statistics NCS
				LEFT JOIN node N ON N.nid = NCS.nid
				WHERE N.uid = $userId) AS num_comments,
			(SELECT COUNT(*) FROM activity A WHERE A.uid = $userId AND A.op = 'view' AND A.type = 'user') AS num_profileviews,
			(SELECT COUNT(*) FROM activity A
				LEFT JOIN node N ON N.nid = A.nid
				WHERE A.uid = $userId AND N.type = 'art' AND A.op = 'view' AND A.type = 'node') AS num_artviews
	"));
	
	return $block;
}

function _phptemplate_variables ($hook, $vars = array()) 
{
  if ($hook == 'page') {
    saw_removetab ('personal heartbeat', $vars);
  }

  return $vars;
}

function saw_removetab ($label, &$vars) {
  $tabs = explode("\n", $vars['tabs']);
  $vars['tabs'] = '';

  foreach ($tabs as $tab) {
    if (strpos($tab, '>' . $label . '<') === FALSE) {
      $vars['tabs'] .= $tab . "\n";
    }
  }
}


// Thanks to 
function saw_fieldset ($element)
{
  // remove stuff we don't want shown
	
	global $user;
	
	if (!in_array ('admin', $user -> roles) && !in_array ('moderator', $user -> roles))
		switch ($element['#title']) {
			case "Input format":
			case "Revision information":
			case "Authoring information":
			case "Menu settings":
			case "URL path settings":
			case "Publishing options":
			$element['#attributes'] = array("style" => "display:none;");
			break;
		}

  if (!empty($element['#collapsible'])) {
    drupal_add_js('misc/collapse.js');
    if (!isset($element['#attributes']['class'])) {
      $element['#attributes']['class'] = '';
    }
    $element['#attributes']['class'] .= ' collapsible';
    if (!empty($element['#collapsed'])) {
      $element['#attributes']['class'] .= ' collapsed';
    }
  }
  return '<fieldset'. drupal_attributes($element['#attributes']) .'>'. ($element['#title'] ? '<legend>'. $element['#title'] .'</legend>' : '') . (isset($element['#description']) && $element['#description'] ? '<div class="description">'. $element['#description'] .'</div>' : '') . (!empty($element['#children']) ? $element['#children'] : '') . (isset($element['#value']) ? $element['#value'] : '') ."</fieldset>\n";
}

function saw_users_form_user_register_alter (&$form, &$form_state)
{
  $form ['#validate'] [] = 'saw_users_user_register_validate';
}

function saw_users_user_register_validate ($form, &$form_state)
{

  $studentRoles	= array ();
	$result				= db_query ("SELECT rid FROM role WHERE name = 'art student' ORDER BY name");
	
	while ($row = db_fetch_object ($result))
		$studentRoles [] = $row -> rid;
	
	$mail = $form_state ['values']['mail'];
	
	foreach ($form_state ['values']['user_roles'] as $id => $value)
	{
		if (!$value)
			continue;
		
		if (in_array ($id, $studentRoles) && substr ($mail, -6) != '.ac.uk')
		{
			form_set_error ('mail', t('For art students, e-mail address must ends with: .ac.uk'));
			break;
		}
	}
}

function saw_users_alter_profilemenu (&$menu)
{
	global $user;

	if (in_array ('admin', $user -> roles) || in_array ('premium buyer', $user -> roles) || in_array ('premium seller', $user -> roles) || in_array ('premium', $user -> roles))
		$menu = str_replace ('Upgrade to premium?', 'Account Types', $menu);
}

function saw_users_menu_alter (&$items)
{
	/**
	 * #460: Moderator shouldn't have access to Spam Site configuration
	 */
	
	$paths = array (
		'admin/settings/spam',
		'admin/settings/spam/filters',
		'admin/settings/spam/filters/bayes',
		'admin/settings/spam/filters/custom',
		'admin/settings/spam/filters/duplicate',
		'admin/settings/spam/filters/node-age',
		'admin/settings/spam/filters/node-age',
		'admin/settings/spam/filters/url'
		);
	
	foreach ($paths as $path)
	{
		$items [$path] ['access callback']		= 'saw_users_menu_access_admin_settings_spam';
		$items [$path] ['access arguments'][]	= $items [$path] ['access callback'];
	}
}

function saw_users_form_alter (&$form, &$form_state, $form_id)
{
	switch ($form_id)
	{
		case 'education_node_form':
		
			unset ($form ['title']);
			unset ($form ['taxonomy']);
			
			$form ['print'] ['#attributes'] = array ('style' => 'display: none');
			$form ['menu'] ['#attributes'] = array ('style' => 'display: none');
			$form ['comment_settings'] ['#attributes'] = array ('style' => 'display: none');
			$form ['author'] ['#attributes'] = array ('style' => 'display: none');
			$form ['options'] ['#attributes'] = array ('style' => 'display: none');
			$form ['revision_information'] ['#attributes'] = array ('style' => 'display: none');
			
			unset ($form ['#node'] -> nodewords);
			unset ($form ['custom_breadcrumbs']);
			unset ($form ['#content_extra_fields']);
			

		
			break;
	
		case 'group_node_form':
	
			global $user;
		
			if (!in_array ('admin', $user -> roles))
				unset ($form ['og_register']);
			
			break;
			
		case 'art_node_form':
		case 'item_node_form':
		
			$itemsAvailable						= saw_users_node_stock_level_get ($form ['nid'] ['#value']);
			$itemsAvailableUnlimited	= $itemsAvailable > 10000;
		
			$form ['base'] ['stock_level'] = array (
				'#type'					=> 'fieldset',
				'#title'				=> 'Stock level',
				'#collapsible'	=> false,
				'#collapsed'		=> true,
				'#weight'				=> 24,
				
				'stock_level' => array (
					'#name'						=> 'stock_level',
					'#type'						=> 'textfield',
					'#title'					=> 'Stock level',
					'#default_value'	=> $itemsAvailableUnlimited ? '' : $itemsAvailable,
					'#description'		=> 'Number of items available for sell',
					'#weight'					=> 24
				),
			
				'stock_level_unlimited' => array (
					'#name'						=> 'stock_level_unlimited',
					'#type'						=> 'checkbox',
					'#title'					=> 'Unlimited number of items to sell',
					'#default_value'	=> $itemsAvailableUnlimited,
					'#weight'					=> 24.5
				)
			);
			

			$form ['#validate'] []	= 'saw_users_node_stock_level_validate';
			$form ['#submit'] []		= 'saw_users_node_stock_level_submit';
		
			break;
	}

}

function saw_users_node_stock_level_get ($nodeId)
{
	return (int)db_result (db_query ('SELECT stock FROM {uc_product_stock} WHERE nid = %d', $nodeId));
}

function saw_users_node_stock_level_set ($nodeId, $level)
{
	db_query ("UPDATE {uc_product_stock} SET stock = '%d' WHERE nid = %d", (int)$level, $nodeId);
}


function saw_users_node_stock_level_validate ($form, &$form_state)
{
	if ($form ['#post'] ['field_for_sell'] ['value'] == 'on')
	{
		if (!$form ['#post'] ['stock_level_unlimited'] && ($form ['#post'] ['stock_level'] < 0 || !is_numeric ($form ['#post'] ['stock_level'])))
			form_set_error ('stock_level', t('Stock level must be greater or equal to zero'));
	}
}

function saw_users_node_stock_level_submit ($form, &$form_state)
{
	saw_users_node_stock_level_set ($form ['nid'] ['#value'], $form ['#post'] ['stock_level_unlimited'] ? 10001 : $form ['#post'] ['stock_level']);	
}

/**
 * #460: Moderator shouldn't have access to Spam Site configuration
 */ 
function saw_users_menu_access_admin_settings_spam ()
{
	global $user;

	if (!in_array ('admin', $user -> roles))
		return false;
	
	return true;
}

function saw_users_user_link_from_name ($userName)
{
	return '/' . db_result (db_query ("
		SELECT dst FROM url_alias
		LEFT JOIN users U ON U.name = '%s'
		WHERE src = CONCAT('user/', U.uid)
		LIMIT 1
	", $userName));
}

function saw_users_userid_from_name ($userName)
{
	return db_result (db_query ("
		SELECT uid FROM users
		WHERE name = '%s'
		LIMIT 1
	", $userName));
}

function saw_users_username_from_id ($userId)
{
	return db_result (db_query ("
		SELECT name FROM users
		WHERE uid = %d
		LIMIT 1
	", $userId));
}

function saw_users_flush_caches ()
{
	// #511: Hide 'By Term' tab for group page
	$views = module_invoke ('og_views', 'views_default_views');
	if ($views && is_array ($views))
	{
		$default_views = array_keys ($views);
		$views_status = variable_get ('views_defaults', array());
		$views_status ['posts_by_term'] = true; // true means disable
		variable_set ('views_defaults', $views_status);
		views_invalidate_cache ();
	}
}
